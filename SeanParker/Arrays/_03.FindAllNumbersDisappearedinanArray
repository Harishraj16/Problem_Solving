//Cpp:
class Solution {
public:
    vector<int> findDisappearedNumbers(vector<int>& nums) {
        vector<int> ans;
        int n = nums.size();
        vector<bool> arr(n, false);
        nums.erase(unique(nums.begin(),nums.end()),nums.end());
        for(int i=0;i<nums.size();i++){
            arr[nums[i]-1] = true;
        }
        for(int i=0;i<n;i++){
            if(arr[i]!=true) ans.push_back(i+1);
        }
        return ans;
    }
};


//Java:

class Solution {
    public List<Integer> findDisappearedNumbers(int[] nums) {
        int n = nums.length;
        List<Integer> list = new ArrayList<>();
        boolean[] arr = new boolean[n];
        for(int i=0;i<n;i++){
            arr[nums[i]-1] = true;
        }
        for(int i=0;i<n;i++){
            if(arr[i]!=true) list.add(i+1);
        }
        return list;
    }
}

//Optimal code:
class Solution {
public:
    vector<int> findDisappearedNumbers(vector<int>& nums) {
        for (int i = 0; i < nums.size(); i++) {
           int index =  abs(nums[i]) - 1;
           nums[index] = -abs(nums[index]);
        }

        vector<int> result;

         for (int i = 0; i < nums.size(); i++) {
           if (nums[i] > 0) {
               result.push_back(i + 1);
           }
        }

        return result;
    }
};
